from celery import Celery
from celery.schedules import crontab
from app.scraper import WebScraper, ToScrape
from app import models
from app.postgres_db import SessionLocal

celery = Celery('tasks', broker='redis://localhost:6379')

celery.conf.broker_connection_retry_on_startup = True

celery.conf.beat_schedule = {
    'generate-posts-every-day': {
        'task': 'app.tasks.generate_daily_posts',
        'schedule': crontab(hour=0, minute=0),
    },
}

@celery.task
def generate_posts(id):
    with SessionLocal() as db:
        webscraper = WebScraper(owner_id=id)
        # toscrape = ToScrape(user_id=user_data.id)
        webscraper.scrape()
        posts = webscraper.posts
        post_models = [models.Post(**newPost.dict()) for newPost in posts]
        db.add_all(post_models)
        db.commit()



def fetch_or_create_autogenerated_posts(db,topic):
    autogenerated_posts = db.query(models.Post).filter(models.Post.owner_id == topic,models.Post.is_autogenerated == True).all()
    if not autogenerated_posts:
        if topic == 'devices':
            scraper = WebScraper(owner_id=topic)
        elif topic == 'books':
            scraper = ToScrape(owner_id=topic)
        scraper.scrape()
        posts = scraper.posts
        post_models = [models.Post(**newPost.dict()) for newPost in posts]
        db.add_all(post_models)
        db.commit()
        autogenerated_posts = post_models
    return autogenerated_posts

@celery.task
def generate_daily_posts(user_id,topic):
    with SessionLocal() as db:
        autogenerated_posts = fetch_or_create_autogenerated_posts(db,topic)

        user_autogenerated_post_count = db.query(models.Post).filter(
            models.Post.owner_id == user_id,
            models.Post.is_autogenerated == True
        ).count()

        daily_posts = autogenerated_posts[user_autogenerated_post_count:user_autogenerated_post_count + 10]

        for post in daily_posts:
            post.owner_id = user_id

        db.add_all(daily_posts)
        db.commit()
        